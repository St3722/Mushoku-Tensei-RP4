# interface_cli.py
import os
import sys
import time
import random
import platform
import shutil
import re
from typing import Dict, List, Any, Tuple, Optional, Callable
import colorama
from colorama import Fore, Back, Style

# Initialiser colorama pour le support des couleurs sur Windows
colorama.init()

class InterfaceCLI:
    def __init__(self, game_instance=None):
        """
        Initialise l'interface CLI du jeu MUSKO TENSEI RP
        
        Args:
            game_instance: Instance du jeu principal (MuskoTenseiRP)
        """
        self.game = game_instance
        self.terminal_width, self.terminal_height = self._get_terminal_size()
        
        # D√©finir les couleurs et styles de base
        self.COLORS = {
            'title': Fore.CYAN + Style.BRIGHT,
            'subtitle': Fore.BLUE + Style.BRIGHT,
            'normal': Fore.WHITE,
            'prompt': Fore.GREEN + Style.BRIGHT,
            'input': Fore.YELLOW,
            'success': Fore.GREEN,
            'warning': Fore.YELLOW,
            'error': Fore.RED,
            'critical': Fore.RED + Style.BRIGHT,
            'highlight': Fore.MAGENTA + Style.BRIGHT,
            'info': Fore.CYAN,
            'mana': Fore.BLUE + Style.BRIGHT,
            'health': Fore.RED,
            'gold': Fore.YELLOW + Style.BRIGHT,
            'exp': Fore.GREEN + Style.BRIGHT,
            'item': Fore.WHITE + Style.BRIGHT,
            'rare_item': Fore.BLUE + Style.BRIGHT,
            'epic_item': Fore.MAGENTA + Style.BRIGHT,
            'legendary_item': Fore.YELLOW + Style.BRIGHT,
            'npc_friendly': Fore.GREEN,
            'npc_neutral': Fore.WHITE,
            'npc_hostile': Fore.RED,
            'spell_fire': Fore.RED + Style.BRIGHT,
            'spell_water': Fore.BLUE + Style.BRIGHT,
            'spell_earth': Fore.GREEN,
            'spell_wind': Fore.CYAN,
            'spell_light': Fore.WHITE + Style.BRIGHT,
            'spell_dark': Fore.MAGENTA,
            'reset': Style.RESET_ALL
        }
        
        # D√©finir les √©mojis et symboles pour diff√©rents √©l√©ments
        # Les √©mojis fonctionnent sur la plupart des terminaux modernes
        self.SYMBOLS = {
            'health': '‚ù§Ô∏è',
            'mana': 'üîÆ',
            'gold': 'üí∞',
            'exp': '‚ú®',
            'level': '‚öúÔ∏è',
            'sword': '‚öîÔ∏è',
            'shield': 'üõ°Ô∏è',
            'magic': '‚ú®',
            'potion': 'üß™',
            'book': 'üìö',
            'quest': 'üìú',
            'npc': 'üë§',
            'player': 'üßô‚Äç‚ôÇÔ∏è',
            'enemy': 'üë∫',
            'boss': 'üëπ',
            'location': 'üè†',
            'dungeon': 'üè∞',
            'item': 'üì¶',
            'skill': 'üí™',
            'time_day': '‚òÄÔ∏è',
            'time_night': 'üåô',
            'save': 'üíæ',
            'load': 'üìÇ',
            'success': '‚úÖ',
            'failure': '‚ùå',
            'warning': '‚ö†Ô∏è',
            'arrow': '‚Üí',
            'star': '‚òÖ',
            'empty_star': '‚òÜ',
            'dot': '‚Ä¢',
            'separator': '‚ïê‚ïê‚ïê',
            'box_horizontal': '‚îÅ',
            'box_vertical': '‚îÉ',
            'box_corner_tl': '‚îè',
            'box_corner_tr': '‚îì',
            'box_corner_bl': '‚îó',
            'box_corner_br': '‚îõ',
            'box_t_down': '‚î≥',
            'box_t_up': '‚îª',
            'box_t_right': '‚î£',
            'box_t_left': '‚î´',
            'box_cross': '‚ïã'
        }
        
        # Option pour d√©sactiver les √©mojis si le terminal ne les supporte pas
        self.use_emojis = True
        
        # Historique des commandes pour rappel avec fl√®ches (√† impl√©menter)
        self.command_history = []
        self.history_position = 0
        
        # D√©finir l'√©cran d'accueil du jeu
        self.splash_screens = [self._create_splash_screen()]
        
        # Options d'affichage
        self.text_speed = 0.02  # Vitesse de d√©filement du texte (0 pour instantan√©)
        self.auto_clear = True  # Effacer l'√©cran automatiquement entre les commandes
        self.show_hints = True  # Afficher des astuces pendant le chargement
        
        # L'animation actuelle en cours, le cas √©ch√©ant
        self.current_animation = None
    
    def _get_terminal_size(self) -> Tuple[int, int]:
        """
        R√©cup√®re la taille du terminal
        
        Returns:
            Tuple (largeur, hauteur)
        """
        try:
            columns, lines = shutil.get_terminal_size()
            return columns, lines
        except:
            # Valeurs par d√©faut si impossible de d√©terminer
            return 80, 24
    
    def _create_splash_screen(self) -> str:
        """
        Cr√©e un √©cran d'accueil ASCII art
        
        Returns:
            Texte format√© pour l'√©cran d'accueil
        """
        return f'''{Fore.CYAN + Style.BRIGHT}
    ‚ïî‚ï¶‚ïó‚ï¶ ‚ï¶‚ïî‚ïê‚ïó‚ï¶‚ïî‚ïê‚ïî‚ïê‚ïó  ‚ïî‚ï¶‚ïó‚ïî‚ïê‚ïó‚ïî‚ïó‚ïî‚ïî‚ïê‚ïó‚ïî‚ïê‚ïó‚ï¶
    ‚ïë‚ïë‚ïë‚ïë ‚ïë‚ïö‚ïê‚ïó‚ï†‚ï©‚ïó‚ïë ‚ïë   ‚ïë ‚ïë‚ï£ ‚ïë‚ïë‚ïë‚ïö‚ïê‚ïó‚ïë‚ï£ ‚ïë
    ‚ï© ‚ï©‚ïö‚ïê‚ïù‚ïö‚ïê‚ïù‚ï© ‚ï©‚ïö‚ïê‚ïù   ‚ï© ‚ïö‚ïê‚ïù‚ïù‚ïö‚ïù‚ïö‚ïê‚ïù‚ïö‚ïê‚ïù‚ï©‚ïê‚ïù
        ‚ï¶‚ïê‚ïó‚ïî‚ïê‚ïó  {Fore.YELLOW + Style.BRIGHT}‚öúÔ∏è  {Fore.CYAN + Style.BRIGHT}‚ï¶‚ïê‚ïó‚ïî‚ïê‚ïó
        ‚ï†‚ï¶‚ïù‚ï†‚ïê‚ïù  {Fore.YELLOW + Style.BRIGHT}‚ú®  {Fore.CYAN + Style.BRIGHT}‚ï†‚ï¶‚ïù‚ï†‚ïê‚ïù
        ‚ï©‚ïö‚ïê‚ï©    {Fore.YELLOW + Style.BRIGHT}üîÆ  {Fore.CYAN + Style.BRIGHT}‚ï©‚ïö‚ïê‚ï©  
{Style.RESET_ALL}

{Fore.YELLOW}* Une nouvelle vie dans un monde de magie et d'aventure *{Style.RESET_ALL}
{Fore.WHITE}Inspir√© par {Fore.GREEN}Mushoku Tensei - Jobless Reincarnation{Style.RESET_ALL}

{Fore.CYAN}[ Appuyez sur ENTR√âE pour commencer votre aventure ]{Style.RESET_ALL}
'''
    
    def clear_screen(self):
        """Efface l'√©cran du terminal"""
        os.system('cls' if platform.system() == 'Windows' else 'clear')
    
    def update_terminal_size(self):
        """Met √† jour la taille du terminal"""
        self.terminal_width, self.terminal_height = self._get_terminal_size()
    
    def draw_box(self, content: str, width: int = None, title: str = None, style: str = 'single', color: str = None) -> str:
        """
        Dessine une bo√Æte autour du contenu
        
        Args:
            content: Texte √† encadrer
            width: Largeur de la bo√Æte (par d√©faut: taille du terminal)
            title: Titre optionnel de la bo√Æte
            style: Style de la bo√Æte ('single', 'double', 'thick')
            color: Couleur de la bo√Æte
            
        Returns:
            Texte format√© avec la bo√Æte
        """
        self.update_terminal_size()
        
        # Si aucune largeur n'est sp√©cifi√©e, utiliser la largeur du terminal - 4
        if width is None:
            width = self.terminal_width - 4
            
        # Choisir le style de la bo√Æte
        box_chars = {
            'single': {
                'horizontal': '‚îÄ', 'vertical': '‚îÇ', 
                'top_left': '‚îå', 'top_right': '‚îê',
                'bottom_left': '‚îî', 'bottom_right': '‚îò',
                'title_left': '‚î§', 'title_right': '‚îú'
            },
            'double': {
                'horizontal': '‚ïê', 'vertical': '‚ïë', 
                'top_left': '‚ïî', 'top_right': '‚ïó',
                'bottom_left': '‚ïö', 'bottom_right': '‚ïù',
                'title_left': '‚ï°', 'title_right': '‚ïû'
            },
            'thick': {
                'horizontal': '‚îÅ', 'vertical': '‚îÉ', 
                'top_left': '‚îè', 'top_right': '‚îì',
                'bottom_left': '‚îó', 'bottom_right': '‚îõ',
                'title_left': '‚î´', 'title_right': '‚î£'
            }
        }
        
        box = box_chars.get(style, box_chars['single'])
        
        # Appliquer la couleur
        box_color = self.COLORS.get(color, '') if color in self.COLORS else ''
        reset = Style.RESET_ALL if box_color else ''
        
        # Fractionner le contenu en lignes et s'assurer qu'aucune ligne ne d√©passe la largeur
        lines = content.split('\n')
        wrapped_lines = []
        for line in lines:
            # Si la ligne est trop longue, la fractionner
            while len(line) > width - 4:
                wrapped_lines.append(line[:width-4])
                line = line[width-4:]
            wrapped_lines.append(line)
            
        # Cr√©er la bo√Æte
        box_str = []
        
        # Ligne du haut avec titre √©ventuel
        if title:
            title_len = len(title) + 2  # +2 pour l'espace de chaque c√¥t√©
            left_width = (width - title_len) // 2
            right_width = width - title_len - left_width
            
            box_str.append(f"{box_color}{box['top_left']}{box['horizontal'] * left_width} {title} {box['horizontal'] * right_width}{box['top_right']}{reset}")
        else:
            box_str.append(f"{box_color}{box['top_left']}{box['horizontal'] * width}{box['top_right']}{reset}")
            
        # Contenu
        for line in wrapped_lines:
            padding = width - len(line)
            box_str.append(f"{box_color}{box['vertical']}{reset} {line}{' ' * (padding-1)}{box_color}{box['vertical']}{reset}")
            
        # Ligne du bas
        box_str.append(f"{box_color}{box['bottom_left']}{box['horizontal'] * width}{box['bottom_right']}{reset}")
        
        return "\n".join(box_str)
    
    def print_text(self, text: str, color: str = None, slow: bool = False, center: bool = False, bold: bool = False):
        """
        Affiche du texte avec des options de formatage
        
        Args:
            text: Texte √† afficher
            color: Couleur du texte
            slow: Si True, affiche le texte caract√®re par caract√®re
            center: Si True, centre le texte dans le terminal
            bold: Si True, met le texte en gras
        """
        # Appliquer la couleur et le style
        text_color = self.COLORS.get(color, '') if color in self.COLORS else ''
        text_bold = Style.BRIGHT if bold else ''
        reset = Style.RESET_ALL if text_color or text_bold else ''
        
        # Centrer si n√©cessaire
        if center:
            lines = text.split('\n')
            formatted_lines = []
            for line in lines:
                space = max(0, (self.terminal_width - len(line)) // 2)
                formatted_lines.append(' ' * space + line)
            text = '\n'.join(formatted_lines)
        
        # Pr√©parer le texte format√©
        formatted_text = f"{text_color}{text_bold}{text}{reset}"
        
        # Afficher le texte lentement ou normalement
        if slow and self.text_speed > 0:
            for char in formatted_text:
                print(char, end='', flush=True)
                time.sleep(self.text_speed)
            print()
        else:
            print(formatted_text)
    
    def print_header(self, title: str, subtitle: str = None):
        """
        Affiche un en-t√™te format√© avec titre et sous-titre optionnel
        
        Args:
            title: Titre principal
            subtitle: Sous-titre optionnel
        """
        self.update_terminal_size()
        
        # Cr√©er une ligne d√©corative
        line = "‚ïê" * (self.terminal_width - 4)
        
        # Afficher le titre centr√©
        print("")
        self.print_text(title, color='title', center=True, bold=True)
        
        # Afficher le sous-titre si fourni
        if subtitle:
            self.print_text(subtitle, color='subtitle', center=True)
            
        # Afficher la ligne d√©corative
        self.print_text(line, color='normal', center=True)
        print("")
    
    def print_divider(self, style: str = 'normal'):
        """
        Affiche une ligne s√©paratrice
        
        Args:
            style: Style de la ligne ('normal', 'heavy', 'light', 'dotted')
        """
        self.update_terminal_size()
        
        divider_chars = {
            'normal': '‚îÄ',
            'heavy': '‚îÅ',
            'light': '‚ïå',
            'dotted': '‚îÑ'
        }
        
        char = divider_chars.get(style, '‚îÄ')
        divider = char * (self.terminal_width - 4)
        
        print("")
        self.print_text(divider, color='normal', center=True)
        print("")
    
    def get_formatted_status_bar(self, current: int, maximum: int, width: int = 20, 
                               filled_char: str = '‚ñà', empty_char: str = '‚ñë', 
                               color: str = None) -> str:
        """
        Cr√©e une barre de statut format√©e
        
        Args:
            current: Valeur actuelle
            maximum: Valeur maximale
            width: Largeur de la barre
            filled_char: Caract√®re pour la partie remplie
            empty_char: Caract√®re pour la partie vide
            color: Couleur de la barre
            
        Returns:
            Texte format√© pour la barre de statut
        """
        # √âviter la division par z√©ro
        if maximum <= 0:
            maximum = 1
            
        # Calculer le ratio et le nombre de caract√®res remplis
        ratio = min(1.0, current / maximum)
        filled_count = int(width * ratio)
        
        # Cr√©er la barre
        bar_color = self.COLORS.get(color, '') if color in self.COLORS else ''
        reset = Style.RESET_ALL if bar_color else ''
        
        bar = f"{bar_color}{filled_char * filled_count}{empty_char * (width - filled_count)}{reset}"
        
        return f"{bar} {current}/{maximum}"
    
    def print_player_stats(self):
        """Affiche les statistiques du joueur dans une barre d'√©tat en haut de l'√©cran"""
        if not self.game or not hasattr(self.game, "player"):
            return
            
        player = self.game.player
        
        # R√©cup√©rer les stats
        hp = player.get("current_hp", 0)
        max_hp = player.get("max_hp", 100)
        mp = player.get("current_mp", 0)
        max_mp = player.get("max_mp", 50)
        level = player.get("level", 1)
        xp = player.get("xp", 0)
        
        # Calculer l'XP n√©cessaire pour le niveau suivant
        next_level_xp = 0
        if hasattr(self.game, "character_progression"):
            _, next_level_xp = self.game.character_progression.get_next_level_xp(level)
        
        # Symboles pour les barres de statut
        hp_symbol = f"{self.SYMBOLS['health']} " if self.use_emojis else "HP: "
        mp_symbol = f"{self.SYMBOLS['mana']} " if self.use_emojis else "MP: "
        xp_symbol = f"{self.SYMBOLS['exp']} " if self.use_emojis else "XP: "
        lvl_symbol = f"{self.SYMBOLS['level']} " if self.use_emojis else "LVL: "
        
        # Cr√©er les barres de statut
        hp_bar = self.get_formatted_status_bar(hp, max_hp, width=15, color='health')
        mp_bar = self.get_formatted_status_bar(mp, max_mp, width=15, color='mana')
        xp_bar = self.get_formatted_status_bar(xp, next_level_xp, width=15, color='exp')
        
        # Afficher les statistiques
        print(f"{hp_symbol}{hp_bar}  {mp_symbol}{mp_bar}  {lvl_symbol}{level}  {xp_symbol}{xp_bar}")
        
        # Ligne s√©paratrice
        self.print_divider('light')
    
    def print_location_info(self):
        """Affiche les informations sur la localisation actuelle"""
        if not self.game or not hasattr(self.game, "current_location"):
            return
            
        location_id = self.game.current_location
        
        # Obtenir les donn√©es de l'emplacement
        location_data = {}
        if hasattr(self.game, "location_data"):
            location_data = self.game.location_data.get(location_id, {})
            
        # R√©cup√©rer les infos
        location_name = location_data.get("name", "Unknown Location")
        location_type = location_data.get("type", "area")
        time_of_day = getattr(self.game, "time_of_day", "day")
        weather = getattr(self.game, "weather", "clear")
        
        # Symboles
        location_symbol = self.SYMBOLS.get(f"location", "üè†") if self.use_emojis else ""
        time_symbol = self.SYMBOLS.get(f"time_{time_of_day}", "üïì") if self.use_emojis else ""
        
        # Afficher les infos
        location_text = f"{location_symbol} {location_name} ({location_type.capitalize()})"
        time_text = f"{time_symbol} {time_of_day.capitalize()}, {weather.capitalize()}"
        
        # Centrer dans le terminal
        padding = max(0, self.terminal_width - len(location_text) - len(time_text) - 2)
        
        print(f"{self.COLORS['highlight']}{location_text}{' ' * padding}{time_text}{Style.RESET_ALL}")
        
        # Ligne s√©paratrice
        self.print_divider('light')
    
    def animate_text(self, text: str, animation_type: str = 'typing', color: str = None, delay: float = 0.03):
        """
        Anime l'affichage du texte avec diff√©rents effets
        
        Args:
            text: Texte √† animer
            animation_type: Type d'animation ('typing', 'fade_in', 'blink', 'scroll')
            color: Couleur du texte
            delay: D√©lai entre chaque √©tape de l'animation
        """
        self.current_animation = animation_type
        text_color = self.COLORS.get(color, '') if color in self.COLORS else ''
        reset = Style.RESET_ALL if text_color else ''
        
        if animation_type == 'typing':
            for char in text:
                print(f"{text_color}{char}{reset}", end='', flush=True)
                time.sleep(delay)
            print()
            
        elif animation_type == 'fade_in':
            # Simuler un fondu en utilisant des caract√®res de plus en plus visibles
            chars = ' .:-=+*#%@'
            for i in range(len(chars)):
                print(f"{text_color}{text.replace(' ', chars[i])}{reset}", end='\r', flush=True)
                time.sleep(delay)
            print(f"{text_color}{text}{reset}")
            
        elif animation_type == 'blink':
            # Faire clignoter le texte
            for _ in range(3):
                print(f"{text_color}{text}{reset}", end='\r', flush=True)
                time.sleep(delay * 2)
                print(' ' * len(text), end='\r', flush=True)
                time.sleep(delay)
            print(f"{text_color}{text}{reset}")
            
        elif animation_type == 'scroll':
            # Faire d√©filer le texte de droite √† gauche
            width = self.terminal_width
            padded_text = ' ' * width + text + ' ' * width
            for i in range(len(padded_text) - width):
                print(f"{text_color}{padded_text[i:i+width]}{reset}", end='\r', flush=True)
                time.sleep(delay)
            print()
            
        self.current_animation = None
    
    def display_splash_screen(self):
        """Affiche l'√©cran d'accueil du jeu"""
        self.clear_screen()
        print(random.choice(self.splash_screens))
        input()  # Attendre que l'utilisateur appuie sur Entr√©e
    
    def display_menu(self, title: str, options: List[Tuple[str, Any]], prompt: str = "Votre choix: "):
        """
        Affiche un menu et retourne le choix de l'utilisateur
        
        Args:
            title: Titre du menu
            options: Liste de tuples (texte_option, valeur_retour)
            prompt: Texte d'invite
            
        Returns:
            Valeur associ√©e √† l'option choisie
        """
        self.print_header(title)
        
        # Afficher les options
        for i, (option_text, _) in enumerate(options, 1):
            print(f"{self.COLORS['normal']}{i}. {option_text}{Style.RESET_ALL}")
        
        # Demander le choix de l'utilisateur
        while True:
            print()
            choice = input(f"{self.COLORS['prompt']}{prompt}{self.COLORS['input']}")
            print(Style.RESET_ALL, end="")
            
            try:
                choice_num = int(choice)
                if 1 <= choice_num <= len(options):
                    return options[choice_num - 1][1]
                else:
                    print(f"{self.COLORS['error']}Choix invalide. Veuillez entrer un nombre entre 1 et {len(options)}.{Style.RESET_ALL}")
            except ValueError:
                print(f"{self.COLORS['error']}Veuillez entrer un nombre.{Style.RESET_ALL}")
    
    def get_user_input(self, prompt: str = "> ", color: str = 'prompt', input_color: str = 'input'):
        """
        R√©cup√®re l'entr√©e de l'utilisateur avec formatage
        
        Args:
            prompt: Texte d'invite
            color: Couleur du prompt
            input_color: Couleur du texte saisi
            
        Returns:
            Texte saisi par l'utilisateur
        """
        prompt_color = self.COLORS.get(color, '') if color in self.COLORS else ''
        in_color = self.COLORS.get(input_color, '') if input_color in self.COLORS else ''
        reset = Style.RESET_ALL
        
        user_input = input(f"{prompt_color}{prompt}{in_color}")
        print(f"{reset}", end="")
        
        # Ajouter √† l'historique des commandes si non vide
        if user_input.strip():
            self.command_history.append(user_input)
            self.history_position = len(self.command_history)
            
        return user_input
    
    def display_dialogue(self, character_name: str, text: str, character_mood: str = 'neutral', 
                        avatar: str = None, color: str = None, animate: bool = True):
        """
        Affiche un dialogue avec un personnage
        
        Args:
            character_name: Nom du personnage
            text: Texte du dialogue
            character_mood: Humeur du personnage (affecte l'affichage)
            avatar: Avatar ASCII art du personnage (si disponible)
            color: Couleur du texte (par d√©faut selon le type de PNJ)
            animate: Si True, anime l'affichage du texte
        """
        # D√©terminer la couleur en fonction du type de PNJ
        if not color:
            if character_mood == 'friendly':
                color = 'npc_friendly'
            elif character_mood == 'hostile':
                color = 'npc_hostile'
            else:
                color = 'npc_neutral'
        
        # Cr√©er une bo√Æte de dialogue
        dialogue_header = f"{self.COLORS.get(color, '')}{character_name}{Style.RESET_ALL}"
        
        # Ajouter une indication visuelle de l'humeur
        mood_indicators = {
            'friendly': 'üòä ',
            'neutral': 'üòê ',
            'hostile': 'üò† ',
            'happy': 'üòÑ ',
            'sad': 'üò¢ ',
            'angry': 'üò° ',
            'surprised': 'üò≤ ',
            'confused': 'üòï ',
            'embarrassed': 'üò≥ ',
            'thoughtful': 'ü§î '
        }
        
        mood_indicator = ""
        if self.use_emojis and character_mood in mood_indicators:
            mood_indicator = mood_indicators[character_mood]
            
        # Formater le texte pour la bo√Æte
        text_with_mood = f"{mood_indicator}{text}"
        
        # Afficher l'avatar si disponible
        if avatar:
            # Diviser l'√©cran en deux colonnes
            avatar_width = max(len(line) for line in avatar.split('\n'))
            dialogue_width = self.terminal_width - avatar_width - 8
            
            # Afficher l'avatar et le dialogue c√¥te √† c√¥te
            avatar_lines = avatar.split('\n')
            text_lines = self._wrap_text(text_with_mood, dialogue_width)
            
            # Ajouter le nom au d√©but
            dialogue_box = self.draw_box(text_with_mood, width=dialogue_width, 
                                       title=character_name, style='single', color=color)
            
            dialogue_box_lines = dialogue_box.split('\n')
            
            # Assurer que les deux ont le m√™me nombre de lignes
            max_lines = max(len(avatar_lines), len(dialogue_box_lines))
            while len(avatar_lines) < max_lines:
                avatar_lines.append(' ' * avatar_width)
            while len(dialogue_box_lines) < max_lines:
                dialogue_box_lines.append(' ' * dialogue_width)
            
            # Afficher les lignes c√¥te √† c√¥te
            for i in range(max_lines):
                print(f"{avatar_lines[i]}  {dialogue_box_lines[i]}")
        else:
            # Afficher simplement la bo√Æte de dialogue
            dialogue_box = self.draw_box(text_with_mood, title=character_name, 
                                       style='single', color=color)
            
            if animate and self.text_speed > 0:
                dialogue_lines = dialogue_box.split('\n')
                for line in dialogue_lines:
                    print(line)
                    time.sleep(self.text_speed * 2)
            else:
                print(dialogue_box)
    
    def _wrap_text(self, text: str, width: int) -> List[str]:
        """
        Effectue un retour √† la ligne du texte √† une largeur donn√©e
        
        Args:
            text: Texte √† formater
            width: Largeur maximale
            
        Returns:
            Liste des lignes format√©es
        """
        lines = []
        for paragraph in text.split('\n'):
            current_line = []
            current_length = 0
            
            for word in paragraph.split():
                word_length = len(word)
                
                if current_length + word_length + 1 <= width:  # +1 pour l'espace
                    current_line.append(word)
                    current_length += word_length + 1
                else:
                    lines.append(' '.join(current_line))
                    current_line = [word]
                    current_length = word_length
                    
            if current_line:
                lines.append(' '.join(current_line))
                
        return lines
    
    def display_description(self, description: str, title: str = None, color: str = None, animate: bool = True):
        """
        Affiche une description de lieu ou d'objet
        
        Args:
            description: Texte de la description
            title: Titre optionnel
            color: Couleur du texte
            animate: Si True, anime l'affichage du texte
        """
        # Cr√©er une bo√Æte pour la description
        description_box = self.draw_box(description, title=title, style='single', color=color)
        
        if animate and self.text_speed > 0:
            description_lines = description_box.split('\n')
            for line in description_lines:
                print(line)
                time.sleep(self.text_speed)
        else:
            print(description_box)
    
    def display_inventory(self, inventory: List[Dict[str, Any]], gold: int = 0):
        """
        Affiche l'inventaire du joueur
        
        Args:
            inventory: Liste des objets dans l'inventaire
            gold: Quantit√© d'or poss√©d√©e
        """
        if not inventory:
            self.print_text("Votre inventaire est vide.", color='info')
            return
            
        # En-t√™te de l'inventaire
        gold_symbol = f"{self.SYMBOLS['gold']} " if self.use_emojis else ""
        self.print_header(f"Inventaire ({len(inventory)} objets)", 
                        f"{gold_symbol}{self.COLORS['gold']}{gold} pi√®ces d'or{Style.RESET_ALL}")
        
        # Regrouper par cat√©gorie
        categories = {}
        for item in inventory:
            category = item.get("category", "Divers")
            if category not in categories:
                categories[category] = []
            categories[category].append(item)
        
        # Afficher par cat√©gorie
        for category, items in categories.items():
            self.print_text(f"\n{category}:", color='subtitle', bold=True)
            
            for item in items:
                # D√©terminer la raret√©/couleur
                rarity = item.get("rarity", "common")
                if rarity == "rare":
                    color = "rare_item"
                elif rarity == "epic":
                    color = "epic_item"
                elif rarity == "legendary":
                    color = "legendary_item"
                else:
                    color = "item"
                    
                # Afficher le nom, la quantit√© et la description
                name = item.get("name", "Objet inconnu")
                count = item.get("count", 1)
                description = item.get("description", "")
                
                item_symbol = ""
                if self.use_emojis:
                    item_type = item.get("type", "")
                    if item_type == "weapon":
                        item_symbol = f"{self.SYMBOLS['sword']} "
                    elif item_type == "armor":
                        item_symbol = f"{self.SYMBOLS['shield']} "
                    elif item_type == "potion":
                        item_symbol = f"{self.SYMBOLS['potion']} "
                    elif item_type == "book":
                        item_symbol = f"{self.SYMBOLS['book']} "
                    else:
                        item_symbol = f"{self.SYMBOLS['item']} "
                
                self.print_text(f"{item_symbol}{self.COLORS[color]}{name}{Style.RESET_ALL} x{count}", color=None)
                if description:
                    self.print_text(f"  {description}", color='info')
    
    def display_skills(self, skills: Dict[str, Dict[str, Any]]):
        """
        Affiche les comp√©tences du joueur
        
        Args:
            skills: Dictionnaire des comp√©tences apprises
        """
        if not skills:
            self.print_text("Vous n'avez pas encore appris de comp√©tences.", color='info')
            return
            
        # En-t√™te
        skill_count = len(skills)
        skill_symbol = f"{self.SYMBOLS['skill']} " if self.use_emojis else ""
        self.print_header(f"Comp√©tences ({skill_count})", 
                        f"{skill_symbol}Vos pouvoirs et talents")
        
        # Regrouper par cat√©gorie
        categories = {}
        for skill_id, skill_data in skills.items():
            # Obtenir les infos de la comp√©tence depuis le jeu
            skill_info = {}
            if hasattr(self.game, "skills_data") and "skills" in self.game.skills_data:
                skill_info = self.game.skills_data["skills"].get(skill_id, {})
                
            category = skill_info.get("category", "G√©n√©ral")
            if category not in categories:
                categories[category] = []
                
            # Fusionner les donn√©es
            skill_entry = {**skill_info, **skill_data, "id": skill_id}
            categories[category].append(skill_entry)
        
        # Afficher par cat√©gorie
        for category, category_skills in categories.items():
            self.print_text(f"\n{category}:", color='subtitle', bold=True)
            
            for skill in category_skills:
                # D√©terminer le type et la couleur
                skill_type = skill.get("type", "active")
                
                if skill_type == "spell":
                    element = skill.get("element", "neutral")
                    color = f"spell_{element}" if f"spell_{element}" in self.COLORS else "info"
                elif skill_type == "passive":
                    color = "success"
                else:
                    color = "normal"
                    
                # Afficher le nom, le niveau et la description
                name = skill.get("name", "Comp√©tence inconnue")
                level = skill.get("level", 1)
                description = skill.get("description", "")
                
                # Ajouter des √©toiles pour le niveau
                stars = ""
                if self.use_emojis:
                    stars = self.SYMBOLS['star'] * level
                else:
                    stars = f"Niv. {level}"
                
                self.print_text(f"{self.COLORS[color]}{name}{Style.RESET_ALL} ({stars})", color=None)
                if description:
                    self.print_text(f"  {description}", color='info')
                
                # Afficher la barre de progression si applicable
                if "experience" in skill and "level" in skill:
                    xp = skill.get("experience", 0)
                    # Calculer l'XP pour le niveau suivant si la m√©thode existe
                    next_level_xp = 0
                    if hasattr(self.game, "character_progression"):
                        next_level_xp = self.game.character_progression._calculate_skill_xp_for_level(level + 1)
                    
                    if next_level_xp > 0:
                        xp_bar = self.get_formatted_status_bar(xp, next_level_xp, width=15, color='exp')
                        self.print_text(f"  Progression: {xp_bar}", color=None)
    
    def display_quests(self, quests: List[Dict[str, Any]], completed_quests: List[str] = None):
        """
        Affiche les qu√™tes actives et compl√©t√©es
        
        Args:
            quests: Liste des qu√™tes actives
            completed_quests: Liste des IDs des qu√™tes compl√©t√©es
        """
        # En-t√™te
        quest_symbol = f"{self.SYMBOLS['quest']} " if self.use_emojis else ""
        self.print_header("Journal de qu√™tes", f"{quest_symbol}Vos aventures en cours")
        
        # Afficher les qu√™tes actives
        if quests:
            self.print_text("\nQu√™tes actives:", color='subtitle', bold=True)
            for quest in quests:
                # Obtenir les infos
                title = quest.get("title", "Qu√™te sans nom")
                description = quest.get("description", "")
                objectives = quest.get("objectives", [])
                
                # Afficher la qu√™te
                self.print_text(f"{self.COLORS['highlight']}{title}{Style.RESET_ALL}", color=None)
                if description:
                    self.print_text(f"  {description}", color='info')
                
                # Afficher les objectifs
                if objectives:
                    for obj in objectives:
                        obj_desc = obj.get("description", "")
                        completed = obj.get("completed", False)
                        
                        # Symbole pour l'√©tat d'ach√®vement
                        status = ""
                        if self.use_emojis:
                            status = f"{self.SYMBOLS['success']} " if completed else f"{self.SYMBOLS['dot']} "
                        else:
                            status = "[‚úì] " if completed else "[ ] "
                            
                        self.print_text(f"  {status}{obj_desc}", color='success' if completed else 'normal')
        else:
            self.print_text("Aucune qu√™te active.", color='info')
        
        # Afficher les qu√™tes compl√©t√©es
        if completed_quests and hasattr(self.game, "quests_data"):
            self.print_text("\nQu√™tes compl√©t√©es:", color='subtitle', bold=True)
            
            for quest_id in completed_quests:
                # Obtenir le titre de la qu√™te
                quest_info = self.game.quests_data.get(quest_id, {})
                title = quest_info.get("title", f"Qu√™te {quest_id}")
                
                # Afficher avec une coche
                check = f"{self.SYMBOLS['success']} " if self.use_emojis else "[‚úì] "
                self.print_text(f"{check}{self.COLORS['success']}{title}{Style.RESET_ALL}", color=None)
    
    def display_combat_interface(self, player_stats: Dict[str, Any], enemy_stats: Dict[str, Any], 
                               combat_log: List[str] = None, available_actions: List[Dict[str, Any]] = None):
        """
        Affiche l'interface de combat
        
        Args:
            player_stats: Statistiques du joueur
            enemy_stats: Statistiques de l'ennemi
            combat_log: Historique des actions du combat
            available_actions: Actions disponibles pour le joueur
        """
        self.clear_screen()
        
        # En-t√™te du combat
        enemy_name = enemy_stats.get("name", "Ennemi")
        enemy_level = enemy_stats.get("level", 1)
        enemy_symbol = f"{self.SYMBOLS['enemy']} " if self.use_emojis else ""
        
        self.print_header(f"Combat contre {enemy_name}", f"{enemy_symbol}Niveau {enemy_level}")
        
        # Afficher les barres de vie
        player_hp = player_stats.get("current_hp", 0)
        player_max_hp = player_stats.get("max_hp", 100)
        player_mp = player_stats.get("current_mp", 0)
        player_max_mp = player_stats.get("max_mp", 50)
        
        enemy_hp = enemy_stats.get("current_hp", 0)
        enemy_max_hp = enemy_stats.get("max_hp", 100)
        
        # Symboles pour les barres de statut
        hp_symbol = f"{self.SYMBOLS['health']} " if self.use_emojis else "HP: "
        mp_symbol = f"{self.SYMBOLS['mana']} " if self.use_emojis else "MP: "
        
        # Cr√©er les barres de statut
        player_hp_bar = self.get_formatted_status_bar(player_hp, player_max_hp, width=15, color='health')
        player_mp_bar = self.get_formatted_status_bar(player_mp, player_max_mp, width=15, color='mana')
        enemy_hp_bar = self.get_formatted_status_bar(enemy_hp, enemy_max_hp, width=20, color='health')
        
        # Afficher les statistiques
        print(f"{self.COLORS['normal']}Vous{Style.RESET_ALL}  {hp_symbol}{player_hp_bar}  {mp_symbol}{player_mp_bar}")
        print(f"{self.COLORS['error']}{enemy_name}{Style.RESET_ALL}  {hp_symbol}{enemy_hp_bar}")
        
        # Afficher le journal de combat
        self.print_divider('light')
        if combat_log:
            for i, log_entry in enumerate(combat_log[-5:]):  # Afficher les 5 derni√®res entr√©es
                self.print_text(log_entry)
                
        # Afficher les actions disponibles
        if available_actions:
            self.print_divider('light')
            self.print_text("Actions disponibles:", color='subtitle')
            
            for i, action in enumerate(available_actions, 1):
                action_name = action.get("name", f"Action {i}")
                action_desc = action.get("description", "")
                
                # D√©terminer la couleur selon le type d'action
                action_type = action.get("type", "normal")
                if action_type == "attack":
                    color = "warning"
                elif action_type == "spell":
                    color = "mana"
                elif action_type == "item":
                    color = "info"
                else:
                    color = "normal"
                    
                self.print_text(f"{i}. {self.COLORS[color]}{action_name}{Style.RESET_ALL}", color=None)
                if action_desc:
                    self.print_text(f"   {action_desc}", color='info')
    
    def display_level_up(self, old_level: int, new_level: int, gained_stats: Dict[str, Any]):
        """
        Affiche une animation de mont√©e de niveau
        
        Args:
            old_level: Ancien niveau
            new_level: Nouveau niveau
            gained_stats: Statistiques gagn√©es
        """
        level_symbol = f"{self.SYMBOLS['level']} " if self.use_emojis else ""
        
        # Animation de mont√©e de niveau
        self.animate_text(f"\n{level_symbol} MONT√âE DE NIVEAU ! {level_symbol}", animation_type='blink', color='highlight')
        
        # Afficher les d√©tails
        self.print_text(f"Vous √™tes pass√© du niveau {old_level} au niveau {new_level} !", color='success')
        
        # Afficher les stats gagn√©es
        for stat, value in gained_stats.items():
            if stat == "attribute_points":
                self.print_text(f"  ‚Ä¢ Points d'attribut gagn√©s : +{value}", color='normal')
            elif stat == "skill_points":
                self.print_text(f"  ‚Ä¢ Points de comp√©tence gagn√©s : +{value}", color='normal')
            else:
                self.print_text(f"  ‚Ä¢ {stat.capitalize()} : +{value}", color='normal')
    
    def display_notification(self, message: str, type: str = 'info', dismiss_after: int = None):
        """
        Affiche une notification
        
        Args:
            message: Message de notification
            type: Type de notification ('info', 'success', 'warning', 'error')
            dismiss_after: Temps en secondes avant disparition (None = attendre l'utilisateur)
        """
        # D√©terminer le style et le symbole
        symbol = ""
        if self.use_emojis:
            if type == 'success':
                symbol = f"{self.SYMBOLS['success']} "
            elif type == 'warning':
                symbol = f"{self.SYMBOLS['warning']} "
            elif type == 'error':
                symbol = f"{self.SYMBOLS['failure']} "
            else:
                symbol = f"{self.SYMBOLS['info']} "
        
        # Afficher la notification
        notification_text = f"{symbol}{message}"
        notification_box = self.draw_box(notification_text, color=type)
        
        print(notification_box)
        
        # Attendre si n√©cessaire
        if dismiss_after:
            time.sleep(dismiss_after)
        else:
            input(f"{self.COLORS['prompt']}Appuyez sur Entr√©e pour continuer...{Style.RESET_ALL}")
    
    def display_save_load_menu(self, save_slots: List[Dict[str, Any]]):
        """
        Affiche un menu de sauvegarde/chargement
        
        Args:
            save_slots: Liste des emplacements de sauvegarde disponibles
            
        Returns:
            Dictionnaire avec l'action et l'emplacement choisis
        """
        self.print_header("Sauvegarder / Charger", "G√©rer vos parties")
        
        save_symbol = f"{self.SYMBOLS['save']} " if self.use_emojis else ""
        load_symbol = f"{self.SYMBOLS['load']} " if self.use_emojis else ""
        
        # Afficher les emplacements disponibles
        if save_slots:
            self.print_text("\nSauvegardes disponibles:", color='subtitle')
            
            for i, slot in enumerate(save_slots, 1):
                # Extraire les informations
                slot_name = slot.get("slot_name", f"Emplacement {i}")
                save_time = slot.get("metadata", {}).get("last_save_time", "Date inconnue")
                play_time = slot.get("metadata", {}).get("play_time", 0)
                play_time_str = self._format_playtime(play_time)
                
                # Formater l'affichage
                self.print_text(f"{i}. {self.COLORS['highlight']}{slot_name}{Style.RESET_ALL}", color=None)
                self.print_text(f"   Derni√®re sauvegarde: {save_time}", color='info')
                self.print_text(f"   Temps de jeu: {play_time_str}", color='info')
                
                player_info = slot.get("metadata", {}).get("player_info", {})
                if player_info:
                    level = player_info.get("level", 1)
                    location = player_info.get("location", "Lieu inconnu")
                    self.print_text(f"   Niveau {level}, {location}", color='info')
        else:
            self.print_text("Aucune sauvegarde disponible.", color='info')
        
        # Afficher les options
        options = []
        
        # Option de sauvegarde
        options.append((f"{save_symbol}Sauvegarder la partie", {"action": "save"}))
        
        # Options de chargement si des sauvegardes sont disponibles
        if save_slots:
            for i, slot in enumerate(save_slots, 1):
                slot_name = slot.get("slot_name", f"Emplacement {i}")
                options.append((f"{load_symbol}Charger {slot_name}", {"action": "load", "slot": i-1}))
        
        # Option pour revenir au jeu
        options.append(("Retour au jeu", {"action": "cancel"}))
        
        # Demander le choix de l'utilisateur
        return self.display_menu("Que souhaitez-vous faire ?", options, "Votre choix: ")
    
    def _format_playtime(self, seconds: int) -> str:
        """
        Formate un temps de jeu en heures, minutes, secondes
        
        Args:
            seconds: Temps de jeu en secondes
            
        Returns:
            Temps format√©
        """
        hours, remainder = divmod(seconds, 3600)
        minutes, seconds = divmod(remainder, 60)
        
        if hours > 0:
            return f"{int(hours)}h {int(minutes)}m {int(seconds)}s"
        elif minutes > 0:
            return f"{int(minutes)}m {int(seconds)}s"
        else:
            return f"{int(seconds)}s"
    
    def display_help(self, commands: Dict[str, str]):
        """
        Affiche un √©cran d'aide avec les commandes disponibles
        
        Args:
            commands: Dictionnaire des commandes et leurs descriptions
        """
        self.print_header("Aide", "Liste des commandes disponibles")
        
        for cmd, description in commands.items():
            self.print_text(f"{self.COLORS['prompt']}{cmd}{Style.RESET_ALL}", color=None)
            self.print_text(f"  {description}", color='info')
            
        self.print_text("\nAppuyez sur Entr√©e pour revenir au jeu...", color='normal')
        input()
    
    def display_loading_screen(self, message: str = "Chargement...", duration: float = 1.0):
        """
        Affiche un √©cran de chargement
        
        Args:
            message: Message √† afficher
            duration: Dur√©e minimale d'affichage en secondes
        """
        self.clear_screen()
        
        # Afficher le message de chargement
        self.print_text(message, color='info', center=True)
        
        # Animer un indicateur de progression
        width = min(40, self.terminal_width - 10)
        
        start_time = time.time()
        progress = 0
        
        while time.time() - start_time < duration:
            # Mise √† jour de la barre de progression
            progress = min(1.0, (time.time() - start_time) / duration)
            filled = int(width * progress)
            
            # Dessiner la barre
            bar = f"[{self.COLORS['success']}{'‚ñ†' * filled}{Style.RESET_ALL}{'‚ñ°' * (width - filled)}]"
            percent = int(progress * 100)
            
            # Afficher la barre
            sys.stdout.write(f"\r{' ' * ((self.terminal_width - width - 7) // 2)}{bar} {percent}%")
            sys.stdout.flush()
            
            time.sleep(0.05)
        
        # Terminer avec une barre compl√®te
        bar = f"[{self.COLORS['success']}{'‚ñ†' * width}{Style.RESET_ALL}]"
        sys.stdout.write(f"\r{' ' * ((self.terminal_width - width - 7) // 2)}{bar} 100%")
        sys.stdout.flush()
        
        print("\n\n")
        
        # Afficher une astuce si activ√©
        if self.show_hints:
            hints = [
                "Appuyez sur 'h' pour afficher l'aide √† tout moment.",
                "Les sorts de soin sont particuli√®rement utiles dans les donjons difficiles.",
                "N'oubliez pas de sauvegarder r√©guli√®rement votre progression.",
                "Am√©liorez vos comp√©tences pour d√©bloquer des techniques puissantes.",
                "Les objets rares peuvent √™tre trouv√©s en explorant des zones dangereuses.",
                "Parler aux PNJ peut r√©v√©ler des qu√™tes secr√®tes et des informations utiles.",
                "Certains ennemis sont vuln√©rables √† des types d'attaques sp√©cifiques.",
                "Am√©liorer votre r√©putation aupr√®s des marchands vous donnera de meilleurs prix.",
                "M√©ditez pour restaurer votre mana plus rapidement.",
                "Les livres trouv√©s en exploration peuvent contenir des connaissances pr√©cieuses."
            ]
            
            hint = random.choice(hints)
            self.print_text(f"{self.SYMBOLS['info'] if self.use_emojis else 'ASTUCE:'} {hint}", 
                          color='highlight', center=True)
            
        time.sleep(0.5)
    
    def display_game_over(self, reason: str = None, score: int = None):
        """
        Affiche un √©cran de fin de jeu
        
        Args:
            reason: Raison de la fin du jeu
            score: Score final du joueur
        """
        self.clear_screen()
        
        # ASCII art "Game Over"
        game_over_art = f'''{Fore.RED + Style.BRIGHT}
   ‚ñÑ‚ñà‚ñà‚ñà‚ñà  ‚ñÑ‚ñÑ‚ñÑ       ‚ñà‚ñà‚ñà‚ñÑ ‚ñÑ‚ñà‚ñà‚ñà‚ñì‚ñì‚ñà‚ñà‚ñà‚ñà‚ñà     ‚ñí‚ñà‚ñà‚ñà‚ñà‚ñà   ‚ñà‚ñà‚ñí   ‚ñà‚ñì‚ñì‚ñà‚ñà‚ñà‚ñà‚ñà  ‚ñà‚ñà‚ñÄ‚ñà‚ñà‚ñà  
  ‚ñà‚ñà‚ñí ‚ñÄ‚ñà‚ñí‚ñí‚ñà‚ñà‚ñà‚ñà‚ñÑ    ‚ñì‚ñà‚ñà‚ñí‚ñÄ‚ñà‚ñÄ ‚ñà‚ñà‚ñí‚ñì‚ñà   ‚ñÄ    ‚ñí‚ñà‚ñà‚ñí  ‚ñà‚ñà‚ñí‚ñì‚ñà‚ñà‚ñë   ‚ñà‚ñí‚ñì‚ñà   ‚ñÄ ‚ñì‚ñà‚ñà ‚ñí ‚ñà‚ñà‚ñí
 ‚ñí‚ñà‚ñà‚ñë‚ñÑ‚ñÑ‚ñÑ‚ñë‚ñí‚ñà‚ñà  ‚ñÄ‚ñà‚ñÑ  ‚ñì‚ñà‚ñà    ‚ñì‚ñà‚ñà‚ñë‚ñí‚ñà‚ñà‚ñà      ‚ñí‚ñà‚ñà‚ñë  ‚ñà‚ñà‚ñí ‚ñì‚ñà‚ñà  ‚ñà‚ñí‚ñë‚ñí‚ñà‚ñà‚ñà   ‚ñì‚ñà‚ñà ‚ñë‚ñÑ‚ñà ‚ñí
 ‚ñë‚ñì‚ñà  ‚ñà‚ñà‚ñì‚ñë‚ñà‚ñà‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñà‚ñà ‚ñí‚ñà‚ñà    ‚ñí‚ñà‚ñà ‚ñí‚ñì‚ñà  ‚ñÑ    ‚ñí‚ñà‚ñà   ‚ñà‚ñà‚ñë  ‚ñí‚ñà‚ñà ‚ñà‚ñë‚ñë‚ñí‚ñì‚ñà  ‚ñÑ ‚ñí‚ñà‚ñà‚ñÄ‚ñÄ‚ñà‚ñÑ  
 ‚ñë‚ñí‚ñì‚ñà‚ñà‚ñà‚ñÄ‚ñí ‚ñì‚ñà   ‚ñì‚ñà‚ñà‚ñí‚ñí‚ñà‚ñà‚ñí   ‚ñë‚ñà‚ñà‚ñí‚ñë‚ñí‚ñà‚ñà‚ñà‚ñà‚ñí   ‚ñë ‚ñà‚ñà‚ñà‚ñà‚ñì‚ñí‚ñë   ‚ñí‚ñÄ‚ñà‚ñë  ‚ñë‚ñí‚ñà‚ñà‚ñà‚ñà‚ñí‚ñë‚ñà‚ñà‚ñì ‚ñí‚ñà‚ñà‚ñí
  ‚ñë‚ñí   ‚ñí  ‚ñí‚ñí   ‚ñì‚ñí‚ñà‚ñë‚ñë ‚ñí‚ñë   ‚ñë  ‚ñë‚ñë‚ñë ‚ñí‚ñë ‚ñë   ‚ñë ‚ñí‚ñë‚ñí‚ñë‚ñí‚ñë    ‚ñë ‚ñê‚ñë  ‚ñë‚ñë ‚ñí‚ñë ‚ñë‚ñë ‚ñí‚ñì ‚ñë‚ñí‚ñì‚ñë
   ‚ñë   ‚ñë   ‚ñí   ‚ñí‚ñí ‚ñë‚ñë  ‚ñë      ‚ñë ‚ñë ‚ñë  ‚ñë     ‚ñë ‚ñí ‚ñí‚ñë    ‚ñë ‚ñë‚ñë   ‚ñë ‚ñë  ‚ñë  ‚ñë‚ñí ‚ñë ‚ñí‚ñë
 ‚ñë ‚ñë   ‚ñë   ‚ñë   ‚ñí   ‚ñë      ‚ñë      ‚ñë      ‚ñë ‚ñë ‚ñë ‚ñí       ‚ñë‚ñë     ‚ñë     ‚ñë‚ñë   ‚ñë 
       ‚ñë       ‚ñë  ‚ñë       ‚ñë      ‚ñë  ‚ñë       ‚ñë ‚ñë        ‚ñë     ‚ñë  ‚ñë   ‚ñë     
                                                      ‚ñë                   
{Style.RESET_ALL}'''
        print(game_over_art)
        
        # Afficher la raison de la fin du jeu
        if reason:
            self.print_text(reason, color='error', center=True)
            
        # Afficher le score
        if score is not None:
            self.print_text(f"\nScore final: {score}", color='highlight', center=True)
            
        # Afficher les options
        self.print_divider('heavy')
        
        options = [
            ("Charger une sauvegarde", "load"),
            ("Retourner au menu principal", "menu"),
            ("Quitter le jeu", "quit")
        ]
        
        return self.display_menu("Que souhaitez-vous faire ?", options)
    
    def display_character_creation(self, available_classes: List[Dict[str, Any]], 
                                  available_attributes: List[Dict[str, Any]]):
        """
        Affiche l'interface de cr√©ation de personnage
        
        Args:
            available_classes: Liste des classes disponibles
            available_attributes: Liste des attributs disponibles
            
        Returns:
            Dictionnaire avec les choix du personnage
        """
        self.print_header("Cr√©ation de personnage", "Fa√ßonnez votre nouvelle vie dans ce monde")
        
        # Demander le nom
        self.print_text("Comment voulez-vous vous appeler ?", color='prompt')
        name = self.get_user_input("Nom: ")
        
        # Afficher les classes disponibles
        self.print_divider()
        self.print_text("Choisissez votre classe:", color='prompt')
        
        class_options = []
        for i, class_data in enumerate(available_classes, 1):
            class_name = class_data.get("name", f"Classe {i}")
            class_id = class_data.get("id", f"class_{i}")
            class_desc = class_data.get("description", "")
            
            self.print_text(f"{i}. {self.COLORS['highlight']}{class_name}{Style.RESET_ALL}", color=None)
            self.print_text(f"   {class_desc}", color='info')
            
            class_options.append((class_name, class_id))
        
        # Demander la classe
        while True:
            choice = input(f"{self.COLORS['prompt']}Votre choix (1-{len(available_classes)}): {self.COLORS['input']}")
            print(Style.RESET_ALL, end="")
            
            try:
                choice_num = int(choice)
                if 1 <= choice_num <= len(available_classes):
                    chosen_class = class_options[choice_num - 1][1]
                    break
                else:
                    print(f"{self.COLORS['error']}Choix invalide.{Style.RESET_ALL}")
            except ValueError:
                print(f"{self.COLORS['error']}Veuillez entrer un nombre.{Style.RESET_ALL}")
        
        # R√©partir les points d'attributs
        self.print_divider()
        self.print_text("R√©partissez vos points d'attributs:", color='prompt')
        
        attribute_points = 20  # Points √† r√©partir
        attributes = {}
        
        # Initialiser tous les attributs √† 10
        for attr_data in available_attributes:
            attr_id = attr_data.get("id", "attr")
            attr_name = attr_data.get("name", "Attribut")
            attr_desc = attr_data.get("description", "")
            
            attributes[attr_id] = 10
            self.print_text(f"{self.COLORS['highlight']}{attr_name}{Style.RESET_ALL}: {attributes[attr_id]}", color=None)
            self.print_text(f"   {attr_desc}", color='info')
        
        # R√©partition des points
        self.print_text(f"\nPoints restants: {attribute_points}", color='success')
        
        for attr_data in available_attributes:
            attr_id = attr_data.get("id", "attr")
            attr_name = attr_data.get("name", "Attribut")
            
            while True:
                points_to_add = input(f"{self.COLORS['prompt']}Points √† ajouter √† {attr_name} (0-{attribute_points}): {self.COLORS['input']}")
                print(Style.RESET_ALL, end="")
                
                try:
                    points = int(points_to_add)
                    if 0 <= points <= attribute_points:
                        attributes[attr_id] += points
                        attribute_points -= points
                        self.print_text(f"{attr_name} augment√© √† {attributes[attr_id]}", color='success')
                        self.print_text(f"Points restants: {attribute_points}", color='info')
                        break
                    else:
                        print(f"{self.COLORS['error']}Nombre de points invalide.{Style.RESET_ALL}")
                except ValueError:
                    print(f"{self.COLORS['error']}Veuillez entrer un nombre.{Style.RESET_ALL}")
            
                        # Arr√™ter la r√©partition des points si tous ont √©t√© utilis√©s
            if attribute_points == 0:
                break
        
        # R√©capitulatif des choix
        self.print_divider()
        self.print_text("R√©capitulatif de votre personnage:", color='highlight', center=True)
        self.print_text(f"Nom: {name}", color='normal')
        
        # R√©cup√©rer le nom de la classe choisie
        class_name = ""
        for cname, cid in class_options:
            if cid == chosen_class:
                class_name = cname
                break
        
        self.print_text(f"Classe: {class_name}", color='normal')
        self.print_text("Attributs:", color='normal')
        
        for attr_data in available_attributes:
            attr_id = attr_data.get("id", "attr")
            attr_name = attr_data.get("name", "Attribut")
            self.print_text(f"  {attr_name}: {attributes[attr_id]}", color='info')
        
        # Confirmation
        self.print_text("\n√ätes-vous satisfait de votre personnage?", color='prompt')
        confirm_options = [
            ("Oui, commencer l'aventure", True),
            ("Non, recommencer la cr√©ation", False)
        ]
        
        confirmed = self.display_menu("Confirmation", confirm_options)
        
        if confirmed:
            return {
                "name": name,
                "class": chosen_class,
                "attributes": attributes
            }
        else:
            # Relancer la cr√©ation de personnage
            return self.display_character_creation(available_classes, available_attributes)